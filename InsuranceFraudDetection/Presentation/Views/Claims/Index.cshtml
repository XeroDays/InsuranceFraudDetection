@model IEnumerable<InsuranceFraudDetection.Application.Claims.Models.ClaimViewModel>
@{
    ViewData["Title"] = "All Claims"; 
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="bi bi-list-ul text-primary me-2"></i>All Claims
        </h1>
        <p class="text-muted mb-0">Manage and review insurance claims</p>
    </div>
    <div class="btn-group" role="group">
        <a asp-action="Submit" class="btn btn-primary">
            <i class="bi bi-plus-circle me-2"></i>Submit New Claim
        </a>
        <button id="fraudDetectionBtn" class="btn btn-warning" onclick="startFraudDetection()">
            <i class="bi bi-shield-check me-2"></i>Initiate Fraud Detection Workflow (Real-Time)
        </button>
    </div>
</div>

<!-- Fraud Detection Status Alert -->
<div id="fraudDetectionAlert" class="alert alert-info d-none" role="alert">
    <i class="bi bi-info-circle me-2"></i>
    <span id="fraudDetectionMessage">Initializing fraud detection system...</span>
</div>

@if (!Model.Any())
{
    <div class="card border-0 bg-light">
        <div class="card-body text-center py-5">
            <i class="bi bi-inbox display-1 text-muted mb-3"></i>
            <h4 class="text-muted">No Claims Found</h4>
            <p class="text-muted mb-4">Get started by submitting your first insurance claim.</p>
            <a asp-action="Submit" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Submit Your First Claim
            </a>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm border-0">
       
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-striped table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Claim Type</th>
                            <th>Amount</th>
                            <th>Date Filed</th>
                            <th>Status</th>
                            <th>User</th>
                            <th>Fraud Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in Model)
                        {
                            <tr data-claim-id="@claim.Id">
                                <td><strong>#@claim.Id</strong></td>
                                <td>@claim.ClaimType</td>
                                <td><span class="text-success fw-bold">@claim.Amount.ToString("C")</span></td>
                                <td>@claim.DateFiled.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <span class="badge @(claim.Status.ToLower() switch {
                                        "pending" => "bg-warning text-dark",
                                        "approved" => "bg-success",
                                        "rejected" => "bg-danger",
                                        _ => "bg-secondary"
                                    })">
                                        @claim.Status
                                    </span>
                                </td>
                                <td>@claim.UserName</td>
                                <td id="fraud-status-@claim.Id">
                                    <span class="badge bg-secondary">Not Analyzed</span>
                                </td>
                                <td>
                                    <a asp-action="Details" asp-route-id="@claim.Id" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-eye me-1"></i>Details
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        let connection;
        let isConnected = false;

        async function startFraudDetection() {
            const button = document.getElementById('fraudDetectionBtn');
            const alert = document.getElementById('fraudDetectionAlert');
            const message = document.getElementById('fraudDetectionMessage');
            
            // Disable button and show alert
            button.disabled = true;
            button.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Connecting...';
            alert.classList.remove('d-none');
            message.textContent = 'Connecting to fraud detection system...';

            try {
                // Initialize SignalR connection
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/fraudDetectionHub")
                    .withAutomaticReconnect()
                    .build();

                // Set up event handlers
                connection.on("Connected", (message) => {
                    updateStatus("Connected to fraud detection system. Starting analysis...", "success");
                    isConnected = true;
                    button.innerHTML = '<i class="bi bi-shield-check me-2"></i>Fraud Detection Active';
                    
                    // Get all claim IDs and start analysis
                    const claimIds = Array.from(document.querySelectorAll('tbody tr')).map(row => 
                        parseInt(row.getAttribute('data-claim-id'))
                    );
                    
                    if (claimIds.length > 0) {
                        analyzeClaims(claimIds);
                    }
                });

                connection.on("Disconnected", (message) => {
                    updateStatus("Disconnected from fraud detection system", "warning");
                    isConnected = false;
                    button.disabled = false;
                    button.innerHTML = '<i class="bi bi-shield-check me-2"></i>Initiate Fraud Detection Workflow (Real-Time)';
                });

                connection.on("FraudAnalysisResult", (result) => {
                    updateTableRow(result);
                });

                connection.on("BatchAnalysisComplete", (summary) => {
                    displaySummary(summary);
                });

                // Start connection
                await connection.start();
                
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                updateStatus("Failed to connect to fraud detection system", "danger");
                button.disabled = false;
                button.innerHTML = '<i class="bi bi-shield-check me-2"></i>Initiate Fraud Detection Workflow (Real-Time)';
            }
        }

        async function analyzeClaims(claimIds) {
            if (!isConnected) return;
            
            updateStatus(`Analyzing ${claimIds.length} claims for fraud patterns...`, "info");
            
            try {
                await connection.invoke("AnalyzeMultipleClaims", claimIds);
            } catch (err) {
                console.error("Error analyzing claims: ", err);
                updateStatus("Error during fraud analysis", "danger");
            }
        }

        function updateStatus(message, type) {
            const alert = document.getElementById('fraudDetectionAlert');
            const messageSpan = document.getElementById('fraudDetectionMessage');
            
            alert.className = `alert alert-${type}`;
            messageSpan.textContent = message;
        }

        function updateTableRow(result) {
            const row = document.querySelector(`tr[data-claim-id="${result.claimId}"]`);
            const fraudStatusCell = document.getElementById(`fraud-status-${result.claimId}`);
            
            if (row && fraudStatusCell) {
                // Update fraud status
                const badgeClass = result.isFraudulent ? 'bg-danger' : 'bg-success';
                const icon = result.isFraudulent ? 'bi-exclamation-triangle' : 'bi-check-circle';
                const text = result.isFraudulent ? 'FRAUD DETECTED' : 'LEGITIMATE';
                
                fraudStatusCell.innerHTML = `
                    <span class="badge ${badgeClass}">
                        <i class="bi ${icon} me-1"></i>${text}
                    </span>
                    <br>
                    <small class="text-muted">${result.confidence}% confidence</small>
                `;
                
                // Add visual feedback to the row
                row.classList.add(result.isFraudulent ? 'table-danger' : 'table-success');
                
                // Remove the class after a few seconds for subtle effect
                setTimeout(() => {
                    row.classList.remove('table-danger', 'table-success');
                }, 2000);
            }
        }

        function displaySummary(summary) {
            updateStatus(`Analysis completed! Found ${summary.fraudulentClaims} fraudulent and ${summary.legitimateClaims} legitimate claims out of ${summary.totalClaims} total.`, "success");
            
            // Re-enable button after completion
            const button = document.getElementById('fraudDetectionBtn');
            button.disabled = false;
            button.innerHTML = '<i class="bi bi-shield-check me-2"></i>Initiate Fraud Detection Workflow (Real-Time)';
        }

        // Clean up connection when page is unloaded
        window.addEventListener('beforeunload', function() {
            if (connection && isConnected) {
                connection.stop();
            }
        });
    </script>
}
